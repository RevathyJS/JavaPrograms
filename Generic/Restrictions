Restrictions and Limitations

• Cannot Instantiate Generic Types with Primitive Types
• Cannot Create Instances of Type Parameters
• Cannot Declare Static Fields Whose Types are Type Parameters
• Cannot Use Casts or instanceof With Parameterized Types
• Cannot Create Arrays of Parameterized Types
• Cannot Create, Catch, or Throw Objects of Parameterized Types
• Cannot Overload a Method Where the Formal Parameter Types of Each Overload Erase to the Same Raw Type

Cannot Instantiate Generic Types with Primitive Types

Pair<int, char> p = new Pair<>(8, 'a');  // compile-time error

Cannot Create Instances of Type Parameters

class Gen<T> { 
T ob; 
Gen() {     
ob = new T(); // Illegal!!!  
 }
 }

Cannot Declare Static Fields Whose Types are Type Parameters

class Wrong<T> {   // Wrong, no static variables of type T. 
  static T ob; 
  
static T getob() // Wrong, no static method can use T.  
{    
 return ob; 
} 
}
Cannot Use Casts or instanceof with Parameterized Types

public static <E> void rtti(List<E> list) {
    if (list instanceof ArrayList<Integer>) {  // compile-time error
        // ...
    }
}



Cannot Create Arrays of Parameterized Types
class Gen<T extends Number> {   
T ob; 
T vals[]; // OK 

Gen(T o, T[] nums)
{    
 ob = o; 
 // This statement is illegal.   
 vals = new T[10]; // can't create an array of T
}
}

  // Can't create an array of type-specific generic references.     
Gen<Integer> gens[] = new Gen<Integer>[10]; // Wrong! 


Cannot Create, Catch, or Throw Objects of Parameterized Types

// Extends Throwable indirectly
class MathException<T> extends Exception { /* ... */ }    // compile-time error

// Extends Throwable directly
class QueueFullException<T> extends Throwable { /* ... */ // compile-time error

A method cannot catch an instance of a type parameter:
public static <T extends Exception, J> void execute(List<J> jobs) {
    try {
        for (J job : jobs)
            // ...
    } catch (T e) {   // compile-time error
        // ...
    }
}

Cannot Overload a Method Where the Formal Parameter Types of Each Overload Erase to the Same Raw Type

public class Example {
    public void print(Set<String> strSet) { }
    public void print(Set<Integer> intSet) { }
}



class sample
{
add(T<Integer> v,V v1)
{
}
add(float,float)
{
}
}

